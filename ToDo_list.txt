This is list features what to do due I always forget on what to work
====================================================================
- graph validation add compatible datatypes when input and output port are polymorphic
    - ie. Add node where both input are polymorphic and output also therefore there must be some resolve how to solve what datatype should be output
    - possible solution is to put function into output port getDatatype() due C/C++ code generator is first looking for this function on output port
- python code generator
    - this would be heavily copied from C/C++ code generator when finished
- general weak typed language generator class
- list of errors click on item and focus on graph somewhere
- 2D array node
- figure methods isCluster(), isArray(), ... instead of detect these things from NAME property
    - easiest is to extend Figure object and add this methods to detect it from userData
- put getDatatype() method into InputPort, OutputPort to have it there
    - it will look into userData.datatype variable, parent node or somewhere else
- translate polymorphic datatype into right C/C++ code datatype in C/C++

- GENERAL PRESERVATION PROPERTIS for SHAPE DESIGNER - HOW TO EXTRACT STRING FUNCTIONS FROM CUSTOM OBJECTS GENERALLY steps:

  1. redefine extend() as custom function to save it's input object into some variable like this:
    > GraphLang.UserDefinedNode.extend = function(obj){this.extendObj = obj;}

  2. copy and paste code from node file as whole, it will run extend() and store input object into variable

     GraphLang.ArduinoLib.Node.Add = GraphLang.UserDefinedNode.extend({
         NAME: "GraphLang.ArduinoLib.Node.Add",
         init:function(attr, setter, getter)
         {
             this._super( $.extend({stroke:0, bgColor:null, width:123.40234375, height:78, flagAutoCreatePorts: false},attr), setter, getter);
             var port;
             // in1
             port = this.createPort("input", new draw2d.layout.locator.XYRelPortLocator(27.108986736728813, 27.564102564102566));
             port.setConnectionDirection(3);
             port.setBackgroundColor("#37B1DE");
             port.setName("in1");
             port.setMaxFanOut(20);
     ...

  3. now this is way how to print into console string content of each property:
    > for (m in GraphLang.UserDefinedNode.extendObj){console.log(GraphLang.UserDefinedNode.extendObj[m].toString())}


In progress features
====================
- breakpoints for C++ debugger:
    - on top level canvas OK
    - nested nodes (schematics) - FAIL - need to add support for breakpoints

Finished features
=================
- g++ compilation messages display in IDE
  - for compilation to have output in JSON use this command:
    > g++ -fdiagnostics-format=json <input file name>
  - use Mingw64, normal Mingw is using gcc 6.3.0 which has no -fdiagnostics-format option
    - url:     https://www.mingw-w64.org/downloads/#mingw-w64-builds
    - release: https://github.com/niXman/mingw-builds-binaries/releases

- saving node to local drive
    - if node already exists left all functions
    - if new use template with needed functions

- shape editor for user defined nodes
    - top nodes without inner schematic - OK
    - user defined with schematics inside - OK

- shape designer newly created nodes image creation from clipboard image is empty - OK
    - after refresh and upload it's ok
    - shape designer is using this function: shape_designer.loadSymbolFromGraphLangClass
    - problem is caused when uploading zoomed symbol, when zoom is 1.0 PNG image preview is generated right
    - before upload added click on zoom normal button

- create new schematic - OK
    - it's using old backend function, using newly one as in shape designer will solve problem
    - new code from shape desinger for upload:
        GraphLang.Utils.serverAjaxPostSendReceive(
            ["q", "nodeUpload"],
            ["projectId", projectId, "nodeId", nodeId, "nodeClassName", nodeClassName, "nodeDisplayName", nodeDisplayName, "nodeCodeContent", nodeCodeContent],
            function(){
                console.log(JSON.stringify(GLOBAL_AJAX_RESPONSE));
            }
        )
            .then(response => alert(JSON.stringify(response)))
            .catch(response => alert(JSON.stringify(response)));
    - code updated, now new schematic or update is running ok
